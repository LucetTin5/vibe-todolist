/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * TodoList API
 * TodoList 애플리케이션의 REST API입니다.

## 주요 기능
- Todo CRUD 작업
- 페이징 및 필터링
- 검색 기능
- 통계 조회

## 인증
현재 버전에서는 인증이 필요하지 않습니다.

## 에러 처리
모든 에러 응답은 다음 형식을 따릅니다:
```json
{
  "success": false,
  "error": "에러 메시지",
  "details": "상세 정보 (선택사항)"
}
```
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteApiTodos200,
  DeleteApiTodosId200,
  DeleteApiTodosId404,
  GetApiTodos200,
  GetApiTodos400,
  GetApiTodosId200,
  GetApiTodosId404,
  GetApiTodosParams,
  GetApiTodosStats200,
  GetApiTodosTags200,
  PatchApiTodosBulk200,
  PatchApiTodosBulk400,
  PatchApiTodosBulkBody,
  PatchApiTodosIdToggle200,
  PatchApiTodosIdToggle404,
  PostApiTodos201,
  PostApiTodos400,
  PostApiTodosBody,
  PutApiTodosId200,
  PutApiTodosId400,
  PutApiTodosId404,
  PutApiTodosIdBody
} from './model';

import { customInstance } from '../orval/mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 우선순위별, 카테고리별, 마감일별 통계를 포함한 상세 Todo 통계를 조회합니다.
 * @summary Todo 통계 조회 (Enhanced)
 */
export const getApiTodosStats = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodosStats200>(
      {url: `/api/todos/stats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTodosStatsQueryKey = () => {
    return [`/api/todos/stats`] as const;
    }

    
export const getGetApiTodosStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosStats>>> = ({ signal }) => getApiTodosStats(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosStats>>>
export type GetApiTodosStatsQueryError = unknown


export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Todo 통계 조회 (Enhanced)
 */

export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 Todo에서 사용된 태그 목록을 조회합니다.
 * @summary 사용된 태그 목록 조회
 */
export const getApiTodosTags = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodosTags200>(
      {url: `/api/todos/tags`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTodosTagsQueryKey = () => {
    return [`/api/todos/tags`] as const;
    }

    
export const getGetApiTodosTagsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosTagsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosTags>>> = ({ signal }) => getApiTodosTags(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosTags>>>
export type GetApiTodosTagsQueryError = unknown


export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosTags>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosTags>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosTags>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosTags>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용된 태그 목록 조회
 */

export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosTagsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 Todo를 삭제합니다.
 * @summary 모든 Todo 삭제
 */
export const deleteApiTodos = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteApiTodos200>(
      {url: `/api/todos`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTodosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext> => {

const mutationKey = ['deleteApiTodos'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTodos>>, void> = () => {
          

          return  deleteApiTodos(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTodosMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTodos>>>
    
    export type DeleteApiTodosMutationError = unknown

    /**
 * @summary 모든 Todo 삭제
 */
export const useDeleteApiTodos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTodos>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 고급 필터링, 정렬, 검색 기능이 포함된 Todo 목록을 조회합니다.
 * @summary Todo 목록 조회 (Enhanced)
 */
export const getApiTodos = (
    params?: GetApiTodosParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodos200>(
      {url: `/api/todos`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiTodosQueryKey = (params?: GetApiTodosParams,) => {
    return [`/api/todos`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiTodosQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400>(params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodos>>> = ({ signal }) => getApiTodos(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodos>>>
export type GetApiTodosQueryError = GetApiTodos400


export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400>(
 params: undefined |  GetApiTodosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Todo 목록 조회 (Enhanced)
 */

export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 우선순위, 카테고리, 태그 등의 고급 기능이 포함된 Todo를 생성합니다.
 * @summary Todo 생성 (Enhanced)
 */
export const postApiTodos = (
    postApiTodosBody: PostApiTodosBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiTodos201>(
      {url: `/api/todos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiTodosBody, signal
    },
      options);
    }
  


export const getPostApiTodosMutationOptions = <TError = PostApiTodos400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext> => {

const mutationKey = ['postApiTodos'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTodos>>, {data: PostApiTodosBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiTodos(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTodos>>>
    export type PostApiTodosMutationBody = PostApiTodosBody
    export type PostApiTodosMutationError = PostApiTodos400

    /**
 * @summary Todo 생성 (Enhanced)
 */
export const usePostApiTodos = <TError = PostApiTodos400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiTodos>>,
        TError,
        {data: PostApiTodosBody},
        TContext
      > => {

      const mutationOptions = getPostApiTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 여러 Todo를 한 번에 업데이트합니다. Kanban 드래그앤드롭에서 사용됩니다.
 * @summary Todo 일괄 업데이트 (Kanban)
 */
export const patchApiTodosBulk = (
    patchApiTodosBulkBody: PatchApiTodosBulkBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchApiTodosBulk200>(
      {url: `/api/todos/bulk`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiTodosBulkBody
    },
      options);
    }
  


export const getPatchApiTodosBulkMutationOptions = <TError = PatchApiTodosBulk400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext> => {

const mutationKey = ['patchApiTodosBulk'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTodosBulk>>, {data: PatchApiTodosBulkBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiTodosBulk(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTodosBulkMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTodosBulk>>>
    export type PatchApiTodosBulkMutationBody = PatchApiTodosBulkBody
    export type PatchApiTodosBulkMutationError = PatchApiTodosBulk400

    /**
 * @summary Todo 일괄 업데이트 (Kanban)
 */
export const usePatchApiTodosBulk = <TError = PatchApiTodosBulk400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTodosBulk>>,
        TError,
        {data: PatchApiTodosBulkBody},
        TContext
      > => {

      const mutationOptions = getPatchApiTodosBulkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo의 상세 정보를 조회합니다.
 * @summary 개별 Todo 조회 (Enhanced)
 */
export const getApiTodosId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodosId200>(
      {url: `/api/todos/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTodosIdQueryKey = (id: string,) => {
    return [`/api/todos/${id}`] as const;
    }

    
export const getGetApiTodosIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosId>>> = ({ signal }) => getApiTodosId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosId>>>
export type GetApiTodosIdQueryError = GetApiTodosId404


export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 개별 Todo 조회 (Enhanced)
 */

export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ID로 특정 Todo를 업데이트합니다.
 * @summary Todo 업데이트 (Enhanced)
 */
export const putApiTodosId = (
    id: string,
    putApiTodosIdBody: PutApiTodosIdBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PutApiTodosId200>(
      {url: `/api/todos/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiTodosIdBody
    },
      options);
    }
  


export const getPutApiTodosIdMutationOptions = <TError = PutApiTodosId400 | PutApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext> => {

const mutationKey = ['putApiTodosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTodosId>>, {id: string;data: PutApiTodosIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiTodosId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTodosId>>>
    export type PutApiTodosIdMutationBody = PutApiTodosIdBody
    export type PutApiTodosIdMutationError = PutApiTodosId400 | PutApiTodosId404

    /**
 * @summary Todo 업데이트 (Enhanced)
 */
export const usePutApiTodosId = <TError = PutApiTodosId400 | PutApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiTodosId>>,
        TError,
        {id: string;data: PutApiTodosIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo를 삭제합니다.
 * @summary Todo 삭제
 */
export const deleteApiTodosId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteApiTodosId200>(
      {url: `/api/todos/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTodosIdMutationOptions = <TError = DeleteApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiTodosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTodosId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTodosId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTodosId>>>
    
    export type DeleteApiTodosIdMutationError = DeleteApiTodosId404

    /**
 * @summary Todo 삭제
 */
export const useDeleteApiTodosId = <TError = DeleteApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTodosId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Todo의 완료 상태를 토글합니다.
 * @summary Todo 완료 상태 토글
 */
export const patchApiTodosIdToggle = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchApiTodosIdToggle200>(
      {url: `/api/todos/${id}/toggle`, method: 'PATCH'
    },
      options);
    }
  


export const getPatchApiTodosIdToggleMutationOptions = <TError = PatchApiTodosIdToggle404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext> => {

const mutationKey = ['patchApiTodosIdToggle'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  patchApiTodosIdToggle(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTodosIdToggleMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTodosIdToggle>>>
    
    export type PatchApiTodosIdToggleMutationError = PatchApiTodosIdToggle404

    /**
 * @summary Todo 완료 상태 토글
 */
export const usePatchApiTodosIdToggle = <TError = PatchApiTodosIdToggle404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTodosIdToggle>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPatchApiTodosIdToggleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    

/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * TodoList API
 * TodoList 애플리케이션의 REST API입니다.

## 주요 기능
- Todo CRUD 작업
- 페이징 및 필터링
- 검색 기능
- 통계 조회

## 인증
Bearer 토큰을 사용한 세션 기반 인증이 필요합니다. Authorization 헤더에 'Bearer {sessionId}' 형식으로 전달하세요.

## 에러 처리
모든 에러 응답은 다음 형식을 따릅니다:
```json
{
  "success": false,
  "error": "에러 메시지",
  "details": "상세 정보 (선택사항)"
}
```
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteApiTodos200,
  DeleteApiTodosId200,
  DeleteApiTodosId404,
  DeleteAuthTodosId200,
  DeleteAuthTodosId401,
  DeleteAuthTodosId404,
  DeleteAuthTodosId500,
  GetApiTodos200,
  GetApiTodos400,
  GetApiTodos401,
  GetApiTodosId200,
  GetApiTodosId404,
  GetApiTodosParams,
  GetApiTodosStats200,
  GetApiTodosTags200,
  GetAuthTodos200,
  GetAuthTodos500,
  GetAuthTodosId200,
  GetAuthTodosId401,
  GetAuthTodosId404,
  GetAuthTodosId500,
  GetAuthTodosParams,
  GetAuthTodosStats200,
  GetAuthTodosStats500,
  PatchApiTodosBulk200,
  PatchApiTodosBulk400,
  PatchApiTodosBulkBody,
  PatchApiTodosIdToggle200,
  PatchApiTodosIdToggle404,
  PatchAuthTodosIdToggle200,
  PatchAuthTodosIdToggle401,
  PatchAuthTodosIdToggle404,
  PatchAuthTodosIdToggle500,
  PostApiAuthLogin200,
  PostApiAuthLogin400,
  PostApiAuthLogin401,
  PostApiAuthLogin500,
  PostApiAuthLoginBody,
  PostApiAuthLogout200,
  PostApiAuthLogout400,
  PostApiAuthLogout500,
  PostApiAuthLogoutBody,
  PostApiAuthRefresh200,
  PostApiAuthRefresh401,
  PostApiAuthRefresh500,
  PostApiAuthRefreshBody,
  PostApiAuthSignup201,
  PostApiAuthSignup400,
  PostApiAuthSignup409,
  PostApiAuthSignup500,
  PostApiAuthSignupBody,
  PostApiTodos201,
  PostApiTodos400,
  PostApiTodos401,
  PostApiTodosBody,
  PostAuthTodos201,
  PostAuthTodos401,
  PostAuthTodos500,
  PostAuthTodosBody,
  PutApiTodosId200,
  PutApiTodosId400,
  PutApiTodosId404,
  PutApiTodosIdBody,
  PutAuthTodosId200,
  PutAuthTodosId401,
  PutAuthTodosId404,
  PutAuthTodosId500,
  PutAuthTodosIdBody
} from './model';

import { customInstance } from '../orval/mutator';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 이메일과 비밀번호로 로그인합니다.
 * @summary 사용자 로그인
 */
export const postApiAuthLogin = (
    postApiAuthLoginBody: PostApiAuthLoginBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiAuthLogin200>(
      {url: `/api/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthLoginBody, signal
    },
      options);
    }
  


export const getPostApiAuthLoginMutationOptions = <TError = PostApiAuthLogin400 | PostApiAuthLogin401 | PostApiAuthLogin500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: PostApiAuthLoginBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: PostApiAuthLoginBody}, TContext> => {

const mutationKey = ['postApiAuthLogin'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: PostApiAuthLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = PostApiAuthLoginBody
    export type PostApiAuthLoginMutationError = PostApiAuthLogin400 | PostApiAuthLogin401 | PostApiAuthLogin500

    /**
 * @summary 사용자 로그인
 */
export const usePostApiAuthLogin = <TError = PostApiAuthLogin400 | PostApiAuthLogin401 | PostApiAuthLogin500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: PostApiAuthLoginBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: PostApiAuthLoginBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 새 사용자 계정을 생성합니다.
 * @summary 사용자 회원가입
 */
export const postApiAuthSignup = (
    postApiAuthSignupBody: PostApiAuthSignupBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiAuthSignup201>(
      {url: `/api/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthSignupBody, signal
    },
      options);
    }
  


export const getPostApiAuthSignupMutationOptions = <TError = PostApiAuthSignup400 | PostApiAuthSignup409 | PostApiAuthSignup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignup>>, TError,{data: PostApiAuthSignupBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignup>>, TError,{data: PostApiAuthSignupBody}, TContext> => {

const mutationKey = ['postApiAuthSignup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthSignup>>, {data: PostApiAuthSignupBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthSignup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthSignup>>>
    export type PostApiAuthSignupMutationBody = PostApiAuthSignupBody
    export type PostApiAuthSignupMutationError = PostApiAuthSignup400 | PostApiAuthSignup409 | PostApiAuthSignup500

    /**
 * @summary 사용자 회원가입
 */
export const usePostApiAuthSignup = <TError = PostApiAuthSignup400 | PostApiAuthSignup409 | PostApiAuthSignup500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthSignup>>, TError,{data: PostApiAuthSignupBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthSignup>>,
        TError,
        {data: PostApiAuthSignupBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Refresh token을 사용하여 새로운 access token을 발급받습니다.
 * @summary 토큰 갱신
 */
export const postApiAuthRefresh = (
    postApiAuthRefreshBody: PostApiAuthRefreshBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiAuthRefresh200>(
      {url: `/api/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthRefreshBody, signal
    },
      options);
    }
  


export const getPostApiAuthRefreshMutationOptions = <TError = PostApiAuthRefresh401 | PostApiAuthRefresh500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,{data: PostApiAuthRefreshBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,{data: PostApiAuthRefreshBody}, TContext> => {

const mutationKey = ['postApiAuthRefresh'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthRefresh>>, {data: PostApiAuthRefreshBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthRefresh(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthRefresh>>>
    export type PostApiAuthRefreshMutationBody = PostApiAuthRefreshBody
    export type PostApiAuthRefreshMutationError = PostApiAuthRefresh401 | PostApiAuthRefresh500

    /**
 * @summary 토큰 갱신
 */
export const usePostApiAuthRefresh = <TError = PostApiAuthRefresh401 | PostApiAuthRefresh500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthRefresh>>, TError,{data: PostApiAuthRefreshBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthRefresh>>,
        TError,
        {data: PostApiAuthRefreshBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 세션을 종료하고 로그아웃합니다.
 * @summary 사용자 로그아웃
 */
export const postApiAuthLogout = (
    postApiAuthLogoutBody: PostApiAuthLogoutBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiAuthLogout200>(
      {url: `/api/auth/logout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiAuthLogoutBody, signal
    },
      options);
    }
  


export const getPostApiAuthLogoutMutationOptions = <TError = PostApiAuthLogout400 | PostApiAuthLogout500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,{data: PostApiAuthLogoutBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,{data: PostApiAuthLogoutBody}, TContext> => {

const mutationKey = ['postApiAuthLogout'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogout>>, {data: PostApiAuthLogoutBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogout(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogout>>>
    export type PostApiAuthLogoutMutationBody = PostApiAuthLogoutBody
    export type PostApiAuthLogoutMutationError = PostApiAuthLogout400 | PostApiAuthLogout500

    /**
 * @summary 사용자 로그아웃
 */
export const usePostApiAuthLogout = <TError = PostApiAuthLogout400 | PostApiAuthLogout500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogout>>, TError,{data: PostApiAuthLogoutBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogout>>,
        TError,
        {data: PostApiAuthLogoutBody},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 우선순위별, 카테고리별, 마감일별 통계를 포함한 상세 Todo 통계를 조회합니다.
 * @summary Todo 통계 조회 (Enhanced)
 */
export const getApiTodosStats = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodosStats200>(
      {url: `/api/todos/stats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTodosStatsQueryKey = () => {
    return [`/api/todos/stats`] as const;
    }

    
export const getGetApiTodosStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosStats>>> = ({ signal }) => getApiTodosStats(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosStats>>>
export type GetApiTodosStatsQueryError = unknown


export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Todo 통계 조회 (Enhanced)
 */

export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 Todo에서 사용된 태그 목록을 조회합니다.
 * @summary 사용된 태그 목록 조회
 */
export const getApiTodosTags = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodosTags200>(
      {url: `/api/todos/tags`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTodosTagsQueryKey = () => {
    return [`/api/todos/tags`] as const;
    }

    
export const getGetApiTodosTagsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosTagsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosTags>>> = ({ signal }) => getApiTodosTags(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosTags>>>
export type GetApiTodosTagsQueryError = unknown


export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosTags>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosTags>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosTags>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosTags>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용된 태그 목록 조회
 */

export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosTagsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 Todo를 삭제합니다.
 * @summary 모든 Todo 삭제
 */
export const deleteApiTodos = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteApiTodos200>(
      {url: `/api/todos`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTodosMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext> => {

const mutationKey = ['deleteApiTodos'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTodos>>, void> = () => {
          

          return  deleteApiTodos(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTodosMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTodos>>>
    
    export type DeleteApiTodosMutationError = unknown

    /**
 * @summary 모든 Todo 삭제
 */
export const useDeleteApiTodos = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTodos>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 고급 필터링, 정렬, 검색 기능이 포함된 Todo 목록을 조회합니다.
 * @summary Todo 목록 조회 (Enhanced)
 */
export const getApiTodos = (
    params?: GetApiTodosParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodos200>(
      {url: `/api/todos`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiTodosQueryKey = (params?: GetApiTodosParams,) => {
    return [`/api/todos`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiTodosQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400 | GetApiTodos401>(params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodos>>> = ({ signal }) => getApiTodos(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodos>>>
export type GetApiTodosQueryError = GetApiTodos400 | GetApiTodos401


export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400 | GetApiTodos401>(
 params: undefined |  GetApiTodosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400 | GetApiTodos401>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400 | GetApiTodos401>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Todo 목록 조회 (Enhanced)
 */

export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = GetApiTodos400 | GetApiTodos401>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 우선순위, 카테고리, 태그 등의 고급 기능이 포함된 Todo를 생성합니다.
 * @summary Todo 생성 (Enhanced)
 */
export const postApiTodos = (
    postApiTodosBody: PostApiTodosBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostApiTodos201>(
      {url: `/api/todos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiTodosBody, signal
    },
      options);
    }
  


export const getPostApiTodosMutationOptions = <TError = PostApiTodos400 | PostApiTodos401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext> => {

const mutationKey = ['postApiTodos'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTodos>>, {data: PostApiTodosBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiTodos(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTodos>>>
    export type PostApiTodosMutationBody = PostApiTodosBody
    export type PostApiTodosMutationError = PostApiTodos400 | PostApiTodos401

    /**
 * @summary Todo 생성 (Enhanced)
 */
export const usePostApiTodos = <TError = PostApiTodos400 | PostApiTodos401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiTodos>>,
        TError,
        {data: PostApiTodosBody},
        TContext
      > => {

      const mutationOptions = getPostApiTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 여러 Todo를 한 번에 업데이트합니다. Kanban 드래그앤드롭에서 사용됩니다.
 * @summary Todo 일괄 업데이트 (Kanban)
 */
export const patchApiTodosBulk = (
    patchApiTodosBulkBody: PatchApiTodosBulkBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchApiTodosBulk200>(
      {url: `/api/todos/bulk`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchApiTodosBulkBody
    },
      options);
    }
  


export const getPatchApiTodosBulkMutationOptions = <TError = PatchApiTodosBulk400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext> => {

const mutationKey = ['patchApiTodosBulk'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTodosBulk>>, {data: PatchApiTodosBulkBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiTodosBulk(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTodosBulkMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTodosBulk>>>
    export type PatchApiTodosBulkMutationBody = PatchApiTodosBulkBody
    export type PatchApiTodosBulkMutationError = PatchApiTodosBulk400

    /**
 * @summary Todo 일괄 업데이트 (Kanban)
 */
export const usePatchApiTodosBulk = <TError = PatchApiTodosBulk400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTodosBulk>>,
        TError,
        {data: PatchApiTodosBulkBody},
        TContext
      > => {

      const mutationOptions = getPatchApiTodosBulkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo의 상세 정보를 조회합니다.
 * @summary 개별 Todo 조회 (Enhanced)
 */
export const getApiTodosId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiTodosId200>(
      {url: `/api/todos/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiTodosIdQueryKey = (id: string,) => {
    return [`/api/todos/${id}`] as const;
    }

    
export const getGetApiTodosIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosId>>> = ({ signal }) => getApiTodosId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosId>>>
export type GetApiTodosIdQueryError = GetApiTodosId404


export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 개별 Todo 조회 (Enhanced)
 */

export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = GetApiTodosId404>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ID로 특정 Todo를 업데이트합니다.
 * @summary Todo 업데이트 (Enhanced)
 */
export const putApiTodosId = (
    id: string,
    putApiTodosIdBody: PutApiTodosIdBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PutApiTodosId200>(
      {url: `/api/todos/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putApiTodosIdBody
    },
      options);
    }
  


export const getPutApiTodosIdMutationOptions = <TError = PutApiTodosId400 | PutApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext> => {

const mutationKey = ['putApiTodosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTodosId>>, {id: string;data: PutApiTodosIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiTodosId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTodosId>>>
    export type PutApiTodosIdMutationBody = PutApiTodosIdBody
    export type PutApiTodosIdMutationError = PutApiTodosId400 | PutApiTodosId404

    /**
 * @summary Todo 업데이트 (Enhanced)
 */
export const usePutApiTodosId = <TError = PutApiTodosId400 | PutApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiTodosId>>,
        TError,
        {id: string;data: PutApiTodosIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo를 삭제합니다.
 * @summary Todo 삭제
 */
export const deleteApiTodosId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteApiTodosId200>(
      {url: `/api/todos/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiTodosIdMutationOptions = <TError = DeleteApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiTodosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTodosId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTodosId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTodosId>>>
    
    export type DeleteApiTodosIdMutationError = DeleteApiTodosId404

    /**
 * @summary Todo 삭제
 */
export const useDeleteApiTodosId = <TError = DeleteApiTodosId404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTodosId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Todo의 완료 상태를 토글합니다.
 * @summary Todo 완료 상태 토글
 */
export const patchApiTodosIdToggle = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchApiTodosIdToggle200>(
      {url: `/api/todos/${id}/toggle`, method: 'PATCH'
    },
      options);
    }
  


export const getPatchApiTodosIdToggleMutationOptions = <TError = PatchApiTodosIdToggle404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext> => {

const mutationKey = ['patchApiTodosIdToggle'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  patchApiTodosIdToggle(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTodosIdToggleMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTodosIdToggle>>>
    
    export type PatchApiTodosIdToggleMutationError = PatchApiTodosIdToggle404

    /**
 * @summary Todo 완료 상태 토글
 */
export const usePatchApiTodosIdToggle = <TError = PatchApiTodosIdToggle404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTodosIdToggle>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPatchApiTodosIdToggleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 인증된 사용자의 Todo 목록을 조회합니다.
 * @summary 사용자별 Todo 목록 조회
 */
export const getAuthTodos = (
    params?: GetAuthTodosParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetAuthTodos200>(
      {url: `/auth/todos`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetAuthTodosQueryKey = (params?: GetAuthTodosParams,) => {
    return [`/auth/todos`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAuthTodosQueryOptions = <TData = Awaited<ReturnType<typeof getAuthTodos>>, TError = GetAuthTodos500>(params?: GetAuthTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthTodosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthTodos>>> = ({ signal }) => getAuthTodos(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthTodos>>>
export type GetAuthTodosQueryError = GetAuthTodos500


export function useGetAuthTodos<TData = Awaited<ReturnType<typeof getAuthTodos>>, TError = GetAuthTodos500>(
 params: undefined |  GetAuthTodosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTodos>>,
          TError,
          Awaited<ReturnType<typeof getAuthTodos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthTodos<TData = Awaited<ReturnType<typeof getAuthTodos>>, TError = GetAuthTodos500>(
 params?: GetAuthTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTodos>>,
          TError,
          Awaited<ReturnType<typeof getAuthTodos>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthTodos<TData = Awaited<ReturnType<typeof getAuthTodos>>, TError = GetAuthTodos500>(
 params?: GetAuthTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용자별 Todo 목록 조회
 */

export function useGetAuthTodos<TData = Awaited<ReturnType<typeof getAuthTodos>>, TError = GetAuthTodos500>(
 params?: GetAuthTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodos>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthTodosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 새로운 Todo를 생성합니다.
 * @summary Todo 생성
 */
export const postAuthTodos = (
    postAuthTodosBody: PostAuthTodosBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PostAuthTodos201>(
      {url: `/auth/todos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthTodosBody, signal
    },
      options);
    }
  


export const getPostAuthTodosMutationOptions = <TError = PostAuthTodos401 | PostAuthTodos500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthTodos>>, TError,{data: PostAuthTodosBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthTodos>>, TError,{data: PostAuthTodosBody}, TContext> => {

const mutationKey = ['postAuthTodos'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthTodos>>, {data: PostAuthTodosBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthTodos(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthTodos>>>
    export type PostAuthTodosMutationBody = PostAuthTodosBody
    export type PostAuthTodosMutationError = PostAuthTodos401 | PostAuthTodos500

    /**
 * @summary Todo 생성
 */
export const usePostAuthTodos = <TError = PostAuthTodos401 | PostAuthTodos500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthTodos>>, TError,{data: PostAuthTodosBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postAuthTodos>>,
        TError,
        {data: PostAuthTodosBody},
        TContext
      > => {

      const mutationOptions = getPostAuthTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo를 조회합니다.
 * @summary 개별 Todo 조회
 */
export const getAuthTodosId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetAuthTodosId200>(
      {url: `/auth/todos/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthTodosIdQueryKey = (id: string,) => {
    return [`/auth/todos/${id}`] as const;
    }

    
export const getGetAuthTodosIdQueryOptions = <TData = Awaited<ReturnType<typeof getAuthTodosId>>, TError = GetAuthTodosId401 | GetAuthTodosId404 | GetAuthTodosId500>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthTodosIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthTodosId>>> = ({ signal }) => getAuthTodosId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthTodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthTodosId>>>
export type GetAuthTodosIdQueryError = GetAuthTodosId401 | GetAuthTodosId404 | GetAuthTodosId500


export function useGetAuthTodosId<TData = Awaited<ReturnType<typeof getAuthTodosId>>, TError = GetAuthTodosId401 | GetAuthTodosId404 | GetAuthTodosId500>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTodosId>>,
          TError,
          Awaited<ReturnType<typeof getAuthTodosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthTodosId<TData = Awaited<ReturnType<typeof getAuthTodosId>>, TError = GetAuthTodosId401 | GetAuthTodosId404 | GetAuthTodosId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTodosId>>,
          TError,
          Awaited<ReturnType<typeof getAuthTodosId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthTodosId<TData = Awaited<ReturnType<typeof getAuthTodosId>>, TError = GetAuthTodosId401 | GetAuthTodosId404 | GetAuthTodosId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 개별 Todo 조회
 */

export function useGetAuthTodosId<TData = Awaited<ReturnType<typeof getAuthTodosId>>, TError = GetAuthTodosId401 | GetAuthTodosId404 | GetAuthTodosId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthTodosIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Todo의 정보를 업데이트합니다.
 * @summary Todo 업데이트
 */
export const putAuthTodosId = (
    id: string,
    putAuthTodosIdBody: PutAuthTodosIdBody,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PutAuthTodosId200>(
      {url: `/auth/todos/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putAuthTodosIdBody
    },
      options);
    }
  


export const getPutAuthTodosIdMutationOptions = <TError = PutAuthTodosId401 | PutAuthTodosId404 | PutAuthTodosId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAuthTodosId>>, TError,{id: string;data: PutAuthTodosIdBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putAuthTodosId>>, TError,{id: string;data: PutAuthTodosIdBody}, TContext> => {

const mutationKey = ['putAuthTodosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAuthTodosId>>, {id: string;data: PutAuthTodosIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putAuthTodosId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutAuthTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAuthTodosId>>>
    export type PutAuthTodosIdMutationBody = PutAuthTodosIdBody
    export type PutAuthTodosIdMutationError = PutAuthTodosId401 | PutAuthTodosId404 | PutAuthTodosId500

    /**
 * @summary Todo 업데이트
 */
export const usePutAuthTodosId = <TError = PutAuthTodosId401 | PutAuthTodosId404 | PutAuthTodosId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putAuthTodosId>>, TError,{id: string;data: PutAuthTodosIdBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putAuthTodosId>>,
        TError,
        {id: string;data: PutAuthTodosIdBody},
        TContext
      > => {

      const mutationOptions = getPutAuthTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Todo를 삭제합니다.
 * @summary Todo 삭제
 */
export const deleteAuthTodosId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteAuthTodosId200>(
      {url: `/auth/todos/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAuthTodosIdMutationOptions = <TError = DeleteAuthTodosId401 | DeleteAuthTodosId404 | DeleteAuthTodosId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAuthTodosId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAuthTodosId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteAuthTodosId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAuthTodosId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteAuthTodosId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAuthTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAuthTodosId>>>
    
    export type DeleteAuthTodosIdMutationError = DeleteAuthTodosId401 | DeleteAuthTodosId404 | DeleteAuthTodosId500

    /**
 * @summary Todo 삭제
 */
export const useDeleteAuthTodosId = <TError = DeleteAuthTodosId401 | DeleteAuthTodosId404 | DeleteAuthTodosId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAuthTodosId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAuthTodosId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteAuthTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Todo의 완료 상태를 토글합니다.
 * @summary Todo 완료 상태 토글
 */
export const patchAuthTodosIdToggle = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<PatchAuthTodosIdToggle200>(
      {url: `/auth/todos/${id}/toggle`, method: 'PATCH'
    },
      options);
    }
  


export const getPatchAuthTodosIdToggleMutationOptions = <TError = PatchAuthTodosIdToggle401 | PatchAuthTodosIdToggle404 | PatchAuthTodosIdToggle500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAuthTodosIdToggle>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchAuthTodosIdToggle>>, TError,{id: string}, TContext> => {

const mutationKey = ['patchAuthTodosIdToggle'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAuthTodosIdToggle>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  patchAuthTodosIdToggle(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAuthTodosIdToggleMutationResult = NonNullable<Awaited<ReturnType<typeof patchAuthTodosIdToggle>>>
    
    export type PatchAuthTodosIdToggleMutationError = PatchAuthTodosIdToggle401 | PatchAuthTodosIdToggle404 | PatchAuthTodosIdToggle500

    /**
 * @summary Todo 완료 상태 토글
 */
export const usePatchAuthTodosIdToggle = <TError = PatchAuthTodosIdToggle401 | PatchAuthTodosIdToggle404 | PatchAuthTodosIdToggle500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAuthTodosIdToggle>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchAuthTodosIdToggle>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPatchAuthTodosIdToggleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 인증된 사용자의 Todo 통계 정보를 조회합니다.
 * @summary 사용자별 Todo 통계 조회
 */
export const getAuthTodosStats = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetAuthTodosStats200>(
      {url: `/auth/todos/stats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAuthTodosStatsQueryKey = () => {
    return [`/auth/todos/stats`] as const;
    }

    
export const getGetAuthTodosStatsQueryOptions = <TData = Awaited<ReturnType<typeof getAuthTodosStats>>, TError = GetAuthTodosStats500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthTodosStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthTodosStats>>> = ({ signal }) => getAuthTodosStats(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthTodosStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthTodosStats>>>
export type GetAuthTodosStatsQueryError = GetAuthTodosStats500


export function useGetAuthTodosStats<TData = Awaited<ReturnType<typeof getAuthTodosStats>>, TError = GetAuthTodosStats500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getAuthTodosStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthTodosStats<TData = Awaited<ReturnType<typeof getAuthTodosStats>>, TError = GetAuthTodosStats500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getAuthTodosStats>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthTodosStats<TData = Awaited<ReturnType<typeof getAuthTodosStats>>, TError = GetAuthTodosStats500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용자별 Todo 통계 조회
 */

export function useGetAuthTodosStats<TData = Awaited<ReturnType<typeof getAuthTodosStats>>, TError = GetAuthTodosStats500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthTodosStats>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthTodosStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}





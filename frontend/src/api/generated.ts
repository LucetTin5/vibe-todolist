/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * TodoList API
 * TodoList 애플리케이션의 REST API입니다.

## 주요 기능
- Todo CRUD 작업
- 페이징 및 필터링
- 검색 기능
- 통계 조회

## 인증
현재 버전에서는 인증이 필요하지 않습니다.

## 에러 처리
모든 에러 응답은 다음 형식을 따릅니다:
```json
{
  "success": false,
  "error": "에러 메시지",
  "details": "상세 정보 (선택사항)"
}
```
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteApiTodos200,
  DeleteApiTodosId200,
  DeleteApiTodosId404,
  GetApiTodos200,
  GetApiTodos400,
  GetApiTodosId200,
  GetApiTodosId404,
  GetApiTodosParams,
  GetApiTodosStats200,
  GetApiTodosTags200,
  PatchApiTodosBulk200,
  PatchApiTodosBulk400,
  PatchApiTodosBulkBody,
  PatchApiTodosIdToggle200,
  PatchApiTodosIdToggle404,
  PostApiTodos201,
  PostApiTodos400,
  PostApiTodosBody,
  PutApiTodosId200,
  PutApiTodosId400,
  PutApiTodosId404,
  PutApiTodosIdBody
} from './model';





/**
 * 우선순위별, 카테고리별, 마감일별 통계를 포함한 상세 Todo 통계를 조회합니다.
 * @summary Todo 통계 조회 (Enhanced)
 */
export const getApiTodosStats = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiTodosStats200>> => {
    
    
    return axios.default.get(
      `/api/todos/stats`,options
    );
  }


export const getGetApiTodosStatsQueryKey = () => {
    return [`/api/todos/stats`] as const;
    }

    
export const getGetApiTodosStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosStats>>> = ({ signal }) => getApiTodosStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosStats>>>
export type GetApiTodosStatsQueryError = AxiosError<unknown>


export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosStats>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosStats>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Todo 통계 조회 (Enhanced)
 */

export function useGetApiTodosStats<TData = Awaited<ReturnType<typeof getApiTodosStats>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosStats>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosStatsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 Todo에서 사용된 태그 목록을 조회합니다.
 * @summary 사용된 태그 목록 조회
 */
export const getApiTodosTags = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiTodosTags200>> => {
    
    
    return axios.default.get(
      `/api/todos/tags`,options
    );
  }


export const getGetApiTodosTagsQueryKey = () => {
    return [`/api/todos/tags`] as const;
    }

    
export const getGetApiTodosTagsQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosTagsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosTags>>> = ({ signal }) => getApiTodosTags({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosTags>>>
export type GetApiTodosTagsQueryError = AxiosError<unknown>


export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosTags>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosTags>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosTags>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosTags>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 사용된 태그 목록 조회
 */

export function useGetApiTodosTags<TData = Awaited<ReturnType<typeof getApiTodosTags>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosTags>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosTagsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 모든 Todo를 삭제합니다.
 * @summary 모든 Todo 삭제
 */
export const deleteApiTodos = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteApiTodos200>> => {
    
    
    return axios.default.delete(
      `/api/todos`,options
    );
  }



export const getDeleteApiTodosMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext> => {

const mutationKey = ['deleteApiTodos'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTodos>>, void> = () => {
          

          return  deleteApiTodos(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTodosMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTodos>>>
    
    export type DeleteApiTodosMutationError = AxiosError<unknown>

    /**
 * @summary 모든 Todo 삭제
 */
export const useDeleteApiTodos = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodos>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTodos>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteApiTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 고급 필터링, 정렬, 검색 기능이 포함된 Todo 목록을 조회합니다.
 * @summary Todo 목록 조회 (Enhanced)
 */
export const getApiTodos = (
    params?: GetApiTodosParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiTodos200>> => {
    
    
    return axios.default.get(
      `/api/todos`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetApiTodosQueryKey = (params?: GetApiTodosParams,) => {
    return [`/api/todos`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiTodosQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodos>>, TError = AxiosError<GetApiTodos400>>(params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodos>>> = ({ signal }) => getApiTodos(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodos>>>
export type GetApiTodosQueryError = AxiosError<GetApiTodos400>


export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = AxiosError<GetApiTodos400>>(
 params: undefined |  GetApiTodosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = AxiosError<GetApiTodos400>>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodos>>,
          TError,
          Awaited<ReturnType<typeof getApiTodos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = AxiosError<GetApiTodos400>>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Todo 목록 조회 (Enhanced)
 */

export function useGetApiTodos<TData = Awaited<ReturnType<typeof getApiTodos>>, TError = AxiosError<GetApiTodos400>>(
 params?: GetApiTodosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * 우선순위, 카테고리, 태그 등의 고급 기능이 포함된 Todo를 생성합니다.
 * @summary Todo 생성 (Enhanced)
 */
export const postApiTodos = (
    postApiTodosBody: PostApiTodosBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostApiTodos201>> => {
    
    
    return axios.default.post(
      `/api/todos`,
      postApiTodosBody,options
    );
  }



export const getPostApiTodosMutationOptions = <TError = AxiosError<PostApiTodos400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext> => {

const mutationKey = ['postApiTodos'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTodos>>, {data: PostApiTodosBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiTodos(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTodos>>>
    export type PostApiTodosMutationBody = PostApiTodosBody
    export type PostApiTodosMutationError = AxiosError<PostApiTodos400>

    /**
 * @summary Todo 생성 (Enhanced)
 */
export const usePostApiTodos = <TError = AxiosError<PostApiTodos400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTodos>>, TError,{data: PostApiTodosBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiTodos>>,
        TError,
        {data: PostApiTodosBody},
        TContext
      > => {

      const mutationOptions = getPostApiTodosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * 여러 Todo를 한 번에 업데이트합니다.
 * @summary 대량 Todo 업데이트
 */
export const patchApiTodosBulk = (
    patchApiTodosBulkBody: PatchApiTodosBulkBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchApiTodosBulk200>> => {
    
    
    return axios.default.patch(
      `/api/todos/bulk`,
      patchApiTodosBulkBody,options
    );
  }



export const getPatchApiTodosBulkMutationOptions = <TError = AxiosError<PatchApiTodosBulk400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext> => {

const mutationKey = ['patchApiTodosBulk'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTodosBulk>>, {data: PatchApiTodosBulkBody}> = (props) => {
          const {data} = props ?? {};

          return  patchApiTodosBulk(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTodosBulkMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTodosBulk>>>
    export type PatchApiTodosBulkMutationBody = PatchApiTodosBulkBody
    export type PatchApiTodosBulkMutationError = AxiosError<PatchApiTodosBulk400>

    /**
 * @summary 대량 Todo 업데이트
 */
export const usePatchApiTodosBulk = <TError = AxiosError<PatchApiTodosBulk400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosBulk>>, TError,{data: PatchApiTodosBulkBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTodosBulk>>,
        TError,
        {data: PatchApiTodosBulkBody},
        TContext
      > => {

      const mutationOptions = getPatchApiTodosBulkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo의 상세 정보를 조회합니다.
 * @summary 개별 Todo 조회 (Enhanced)
 */
export const getApiTodosId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiTodosId200>> => {
    
    
    return axios.default.get(
      `/api/todos/${id}`,options
    );
  }


export const getGetApiTodosIdQueryKey = (id: string,) => {
    return [`/api/todos/${id}`] as const;
    }

    
export const getGetApiTodosIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = AxiosError<GetApiTodosId404>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTodosIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTodosId>>> = ({ signal }) => getApiTodosId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTodosId>>>
export type GetApiTodosIdQueryError = AxiosError<GetApiTodosId404>


export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = AxiosError<GetApiTodosId404>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = AxiosError<GetApiTodosId404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiTodosId>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = AxiosError<GetApiTodosId404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 개별 Todo 조회 (Enhanced)
 */

export function useGetApiTodosId<TData = Awaited<ReturnType<typeof getApiTodosId>>, TError = AxiosError<GetApiTodosId404>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTodosId>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTodosIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * ID로 특정 Todo를 업데이트합니다.
 * @summary Todo 업데이트 (Enhanced)
 */
export const putApiTodosId = (
    id: string,
    putApiTodosIdBody: PutApiTodosIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutApiTodosId200>> => {
    
    
    return axios.default.put(
      `/api/todos/${id}`,
      putApiTodosIdBody,options
    );
  }



export const getPutApiTodosIdMutationOptions = <TError = AxiosError<PutApiTodosId400 | PutApiTodosId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext> => {

const mutationKey = ['putApiTodosId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiTodosId>>, {id: string;data: PutApiTodosIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiTodosId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiTodosId>>>
    export type PutApiTodosIdMutationBody = PutApiTodosIdBody
    export type PutApiTodosIdMutationError = AxiosError<PutApiTodosId400 | PutApiTodosId404>

    /**
 * @summary Todo 업데이트 (Enhanced)
 */
export const usePutApiTodosId = <TError = AxiosError<PutApiTodosId400 | PutApiTodosId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiTodosId>>, TError,{id: string;data: PutApiTodosIdBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiTodosId>>,
        TError,
        {id: string;data: PutApiTodosIdBody},
        TContext
      > => {

      const mutationOptions = getPutApiTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * ID로 특정 Todo를 삭제합니다.
 * @summary Todo 삭제
 */
export const deleteApiTodosId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteApiTodosId200>> => {
    
    
    return axios.default.delete(
      `/api/todos/${id}`,options
    );
  }



export const getDeleteApiTodosIdMutationOptions = <TError = AxiosError<DeleteApiTodosId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deleteApiTodosId'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTodosId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTodosId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTodosId>>>
    
    export type DeleteApiTodosIdMutationError = AxiosError<DeleteApiTodosId404>

    /**
 * @summary Todo 삭제
 */
export const useDeleteApiTodosId = <TError = AxiosError<DeleteApiTodosId404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTodosId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTodosId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteApiTodosIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * Todo의 완료 상태를 토글합니다.
 * @summary Todo 완료 상태 토글
 */
export const patchApiTodosIdToggle = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchApiTodosIdToggle200>> => {
    
    
    return axios.default.patch(
      `/api/todos/${id}/toggle`,undefined,options
    );
  }



export const getPatchApiTodosIdToggleMutationOptions = <TError = AxiosError<PatchApiTodosIdToggle404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext> => {

const mutationKey = ['patchApiTodosIdToggle'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  patchApiTodosIdToggle(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTodosIdToggleMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTodosIdToggle>>>
    
    export type PatchApiTodosIdToggleMutationError = AxiosError<PatchApiTodosIdToggle404>

    /**
 * @summary Todo 완료 상태 토글
 */
export const usePatchApiTodosIdToggle = <TError = AxiosError<PatchApiTodosIdToggle404>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTodosIdToggle>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTodosIdToggle>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPatchApiTodosIdToggleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
